// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package eea

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// EeaNodeManagerABI is the input ABI used to generate the binding from.
const EeaNodeManagerABI = "[{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"enodeId\",\"type\":\"string\"}],\"name\":\"getNodeDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_orgId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_enodeId\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_ip\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"_port\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_raftport\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_nodeStatus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_enodeId\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_ip\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"_port\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_raftport\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"_orgId\",\"type\":\"string\"}],\"name\":\"addAdminNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_enodeId\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_ip\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"_port\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_raftport\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"_orgId\",\"type\":\"string\"}],\"name\":\"addOrgNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_enodeId\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_ip\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"_port\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_raftport\",\"type\":\"uint16\"}],\"name\":\"connectionAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nodeIndex\",\"type\":\"uint256\"}],\"name\":\"getNodeDetailsFromIndex\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_orgId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_enodeId\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_ip\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"_port\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_raftport\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_nodeStatus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_enodeId\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_ip\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"_port\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_raftport\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"_orgId\",\"type\":\"string\"}],\"name\":\"approveNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumberOfNodes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_enodeId\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_ip\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"_port\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_raftport\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"_orgId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_action\",\"type\":\"uint256\"}],\"name\":\"updateNodeStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_enodeId\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_ip\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"_port\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_raftport\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"_orgId\",\"type\":\"string\"}],\"name\":\"addNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_permUpgradable\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_enodeId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_ip\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_port\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_raftport\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_orgId\",\"type\":\"string\"}],\"name\":\"NodeProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_enodeId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_ip\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_port\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_raftport\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_orgId\",\"type\":\"string\"}],\"name\":\"NodeApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_enodeId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_ip\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_port\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_raftport\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_orgId\",\"type\":\"string\"}],\"name\":\"NodeDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_enodeId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_ip\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_port\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_raftport\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_orgId\",\"type\":\"string\"}],\"name\":\"NodeActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_enodeId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_ip\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_port\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_raftport\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_orgId\",\"type\":\"string\"}],\"name\":\"NodeBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_enodeId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_ip\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_port\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_raftport\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_orgId\",\"type\":\"string\"}],\"name\":\"NodeRecoveryInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_enodeId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_ip\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_port\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_raftport\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_orgId\",\"type\":\"string\"}],\"name\":\"NodeRecoveryCompleted\",\"type\":\"event\"}]"

// EeaNodeManagerBin is the compiled bytecode used for deploying new contracts.
var EeaNodeManagerBin = ""

// DeployEeaNodeManager deploys a new Ethereum contract, binding an instance of EeaNodeManager to it.
func DeployEeaNodeManager(auth *bind.TransactOpts, backend bind.ContractBackend, _permUpgradable common.Address) (common.Address, *types.Transaction, *EeaNodeManager, error) {
	parsed, err := abi.JSON(strings.NewReader(EeaNodeManagerABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(EeaNodeManagerBin), backend, _permUpgradable)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &EeaNodeManager{EeaNodeManagerCaller: EeaNodeManagerCaller{contract: contract}, EeaNodeManagerTransactor: EeaNodeManagerTransactor{contract: contract}, EeaNodeManagerFilterer: EeaNodeManagerFilterer{contract: contract}}, nil
}

// EeaNodeManager is an auto generated Go binding around an Ethereum contract.
type EeaNodeManager struct {
	EeaNodeManagerCaller     // Read-only binding to the contract
	EeaNodeManagerTransactor // Write-only binding to the contract
	EeaNodeManagerFilterer   // Log filterer for contract events
}

// EeaNodeManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type EeaNodeManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EeaNodeManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EeaNodeManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EeaNodeManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EeaNodeManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EeaNodeManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EeaNodeManagerSession struct {
	Contract     *EeaNodeManager   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// EeaNodeManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EeaNodeManagerCallerSession struct {
	Contract *EeaNodeManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// EeaNodeManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EeaNodeManagerTransactorSession struct {
	Contract     *EeaNodeManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// EeaNodeManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type EeaNodeManagerRaw struct {
	Contract *EeaNodeManager // Generic contract binding to access the raw methods on
}

// EeaNodeManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EeaNodeManagerCallerRaw struct {
	Contract *EeaNodeManagerCaller // Generic read-only contract binding to access the raw methods on
}

// EeaNodeManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EeaNodeManagerTransactorRaw struct {
	Contract *EeaNodeManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEeaNodeManager creates a new instance of EeaNodeManager, bound to a specific deployed contract.
func NewEeaNodeManager(address common.Address, backend bind.ContractBackend) (*EeaNodeManager, error) {
	contract, err := bindEeaNodeManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &EeaNodeManager{EeaNodeManagerCaller: EeaNodeManagerCaller{contract: contract}, EeaNodeManagerTransactor: EeaNodeManagerTransactor{contract: contract}, EeaNodeManagerFilterer: EeaNodeManagerFilterer{contract: contract}}, nil
}

// NewEeaNodeManagerCaller creates a new read-only instance of EeaNodeManager, bound to a specific deployed contract.
func NewEeaNodeManagerCaller(address common.Address, caller bind.ContractCaller) (*EeaNodeManagerCaller, error) {
	contract, err := bindEeaNodeManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EeaNodeManagerCaller{contract: contract}, nil
}

// NewEeaNodeManagerTransactor creates a new write-only instance of EeaNodeManager, bound to a specific deployed contract.
func NewEeaNodeManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*EeaNodeManagerTransactor, error) {
	contract, err := bindEeaNodeManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EeaNodeManagerTransactor{contract: contract}, nil
}

// NewEeaNodeManagerFilterer creates a new log filterer instance of EeaNodeManager, bound to a specific deployed contract.
func NewEeaNodeManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*EeaNodeManagerFilterer, error) {
	contract, err := bindEeaNodeManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EeaNodeManagerFilterer{contract: contract}, nil
}

// bindEeaNodeManager binds a generic wrapper to an already deployed contract.
func bindEeaNodeManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(EeaNodeManagerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EeaNodeManager *EeaNodeManagerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _EeaNodeManager.Contract.EeaNodeManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EeaNodeManager *EeaNodeManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EeaNodeManager.Contract.EeaNodeManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EeaNodeManager *EeaNodeManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EeaNodeManager.Contract.EeaNodeManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EeaNodeManager *EeaNodeManagerCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _EeaNodeManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EeaNodeManager *EeaNodeManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EeaNodeManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EeaNodeManager *EeaNodeManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EeaNodeManager.Contract.contract.Transact(opts, method, params...)
}

// ConnectionAllowed is a free data retrieval call binding the contract method 0x69fe3a8a.
//
// Solidity: function connectionAllowed(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport) constant returns(bool)
func (_EeaNodeManager *EeaNodeManagerCaller) ConnectionAllowed(opts *bind.CallOpts, _enodeId string, _ip [32]byte, _port uint16, _raftport uint16) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _EeaNodeManager.contract.Call(opts, out, "connectionAllowed", _enodeId, _ip, _port, _raftport)
	return *ret0, err
}

// ConnectionAllowed is a free data retrieval call binding the contract method 0x69fe3a8a.
//
// Solidity: function connectionAllowed(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport) constant returns(bool)
func (_EeaNodeManager *EeaNodeManagerSession) ConnectionAllowed(_enodeId string, _ip [32]byte, _port uint16, _raftport uint16) (bool, error) {
	return _EeaNodeManager.Contract.ConnectionAllowed(&_EeaNodeManager.CallOpts, _enodeId, _ip, _port, _raftport)
}

// ConnectionAllowed is a free data retrieval call binding the contract method 0x69fe3a8a.
//
// Solidity: function connectionAllowed(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport) constant returns(bool)
func (_EeaNodeManager *EeaNodeManagerCallerSession) ConnectionAllowed(_enodeId string, _ip [32]byte, _port uint16, _raftport uint16) (bool, error) {
	return _EeaNodeManager.Contract.ConnectionAllowed(&_EeaNodeManager.CallOpts, _enodeId, _ip, _port, _raftport)
}

// GetNodeDetails is a free data retrieval call binding the contract method 0x3f0e0e47.
//
// Solidity: function getNodeDetails(string enodeId) constant returns(string _orgId, string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, uint256 _nodeStatus)
func (_EeaNodeManager *EeaNodeManagerCaller) GetNodeDetails(opts *bind.CallOpts, enodeId string) (struct {
	OrgId      string
	EnodeId    string
	Ip         [32]byte
	Port       uint16
	Raftport   uint16
	NodeStatus *big.Int
}, error) {
	ret := new(struct {
		OrgId      string
		EnodeId    string
		Ip         [32]byte
		Port       uint16
		Raftport   uint16
		NodeStatus *big.Int
	})
	out := ret
	err := _EeaNodeManager.contract.Call(opts, out, "getNodeDetails", enodeId)
	return *ret, err
}

// GetNodeDetails is a free data retrieval call binding the contract method 0x3f0e0e47.
//
// Solidity: function getNodeDetails(string enodeId) constant returns(string _orgId, string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, uint256 _nodeStatus)
func (_EeaNodeManager *EeaNodeManagerSession) GetNodeDetails(enodeId string) (struct {
	OrgId      string
	EnodeId    string
	Ip         [32]byte
	Port       uint16
	Raftport   uint16
	NodeStatus *big.Int
}, error) {
	return _EeaNodeManager.Contract.GetNodeDetails(&_EeaNodeManager.CallOpts, enodeId)
}

// GetNodeDetails is a free data retrieval call binding the contract method 0x3f0e0e47.
//
// Solidity: function getNodeDetails(string enodeId) constant returns(string _orgId, string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, uint256 _nodeStatus)
func (_EeaNodeManager *EeaNodeManagerCallerSession) GetNodeDetails(enodeId string) (struct {
	OrgId      string
	EnodeId    string
	Ip         [32]byte
	Port       uint16
	Raftport   uint16
	NodeStatus *big.Int
}, error) {
	return _EeaNodeManager.Contract.GetNodeDetails(&_EeaNodeManager.CallOpts, enodeId)
}

// GetNodeDetailsFromIndex is a free data retrieval call binding the contract method 0x97c07a9b.
//
// Solidity: function getNodeDetailsFromIndex(uint256 _nodeIndex) constant returns(string _orgId, string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, uint256 _nodeStatus)
func (_EeaNodeManager *EeaNodeManagerCaller) GetNodeDetailsFromIndex(opts *bind.CallOpts, _nodeIndex *big.Int) (struct {
	OrgId      string
	EnodeId    string
	Ip         [32]byte
	Port       uint16
	Raftport   uint16
	NodeStatus *big.Int
}, error) {
	ret := new(struct {
		OrgId      string
		EnodeId    string
		Ip         [32]byte
		Port       uint16
		Raftport   uint16
		NodeStatus *big.Int
	})
	out := ret
	err := _EeaNodeManager.contract.Call(opts, out, "getNodeDetailsFromIndex", _nodeIndex)
	return *ret, err
}

// GetNodeDetailsFromIndex is a free data retrieval call binding the contract method 0x97c07a9b.
//
// Solidity: function getNodeDetailsFromIndex(uint256 _nodeIndex) constant returns(string _orgId, string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, uint256 _nodeStatus)
func (_EeaNodeManager *EeaNodeManagerSession) GetNodeDetailsFromIndex(_nodeIndex *big.Int) (struct {
	OrgId      string
	EnodeId    string
	Ip         [32]byte
	Port       uint16
	Raftport   uint16
	NodeStatus *big.Int
}, error) {
	return _EeaNodeManager.Contract.GetNodeDetailsFromIndex(&_EeaNodeManager.CallOpts, _nodeIndex)
}

// GetNodeDetailsFromIndex is a free data retrieval call binding the contract method 0x97c07a9b.
//
// Solidity: function getNodeDetailsFromIndex(uint256 _nodeIndex) constant returns(string _orgId, string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, uint256 _nodeStatus)
func (_EeaNodeManager *EeaNodeManagerCallerSession) GetNodeDetailsFromIndex(_nodeIndex *big.Int) (struct {
	OrgId      string
	EnodeId    string
	Ip         [32]byte
	Port       uint16
	Raftport   uint16
	NodeStatus *big.Int
}, error) {
	return _EeaNodeManager.Contract.GetNodeDetailsFromIndex(&_EeaNodeManager.CallOpts, _nodeIndex)
}

// GetNumberOfNodes is a free data retrieval call binding the contract method 0xb81c806a.
//
// Solidity: function getNumberOfNodes() constant returns(uint256)
func (_EeaNodeManager *EeaNodeManagerCaller) GetNumberOfNodes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _EeaNodeManager.contract.Call(opts, out, "getNumberOfNodes")
	return *ret0, err
}

// GetNumberOfNodes is a free data retrieval call binding the contract method 0xb81c806a.
//
// Solidity: function getNumberOfNodes() constant returns(uint256)
func (_EeaNodeManager *EeaNodeManagerSession) GetNumberOfNodes() (*big.Int, error) {
	return _EeaNodeManager.Contract.GetNumberOfNodes(&_EeaNodeManager.CallOpts)
}

// GetNumberOfNodes is a free data retrieval call binding the contract method 0xb81c806a.
//
// Solidity: function getNumberOfNodes() constant returns(uint256)
func (_EeaNodeManager *EeaNodeManagerCallerSession) GetNumberOfNodes() (*big.Int, error) {
	return _EeaNodeManager.Contract.GetNumberOfNodes(&_EeaNodeManager.CallOpts)
}

// AddAdminNode is a paid mutator transaction binding the contract method 0x5027a0c3.
//
// Solidity: function addAdminNode(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId) returns()
func (_EeaNodeManager *EeaNodeManagerTransactor) AddAdminNode(opts *bind.TransactOpts, _enodeId string, _ip [32]byte, _port uint16, _raftport uint16, _orgId string) (*types.Transaction, error) {
	return _EeaNodeManager.contract.Transact(opts, "addAdminNode", _enodeId, _ip, _port, _raftport, _orgId)
}

// AddAdminNode is a paid mutator transaction binding the contract method 0x5027a0c3.
//
// Solidity: function addAdminNode(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId) returns()
func (_EeaNodeManager *EeaNodeManagerSession) AddAdminNode(_enodeId string, _ip [32]byte, _port uint16, _raftport uint16, _orgId string) (*types.Transaction, error) {
	return _EeaNodeManager.Contract.AddAdminNode(&_EeaNodeManager.TransactOpts, _enodeId, _ip, _port, _raftport, _orgId)
}

// AddAdminNode is a paid mutator transaction binding the contract method 0x5027a0c3.
//
// Solidity: function addAdminNode(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId) returns()
func (_EeaNodeManager *EeaNodeManagerTransactorSession) AddAdminNode(_enodeId string, _ip [32]byte, _port uint16, _raftport uint16, _orgId string) (*types.Transaction, error) {
	return _EeaNodeManager.Contract.AddAdminNode(&_EeaNodeManager.TransactOpts, _enodeId, _ip, _port, _raftport, _orgId)
}

// AddNode is a paid mutator transaction binding the contract method 0xc7e91b45.
//
// Solidity: function addNode(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId) returns()
func (_EeaNodeManager *EeaNodeManagerTransactor) AddNode(opts *bind.TransactOpts, _enodeId string, _ip [32]byte, _port uint16, _raftport uint16, _orgId string) (*types.Transaction, error) {
	return _EeaNodeManager.contract.Transact(opts, "addNode", _enodeId, _ip, _port, _raftport, _orgId)
}

// AddNode is a paid mutator transaction binding the contract method 0xc7e91b45.
//
// Solidity: function addNode(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId) returns()
func (_EeaNodeManager *EeaNodeManagerSession) AddNode(_enodeId string, _ip [32]byte, _port uint16, _raftport uint16, _orgId string) (*types.Transaction, error) {
	return _EeaNodeManager.Contract.AddNode(&_EeaNodeManager.TransactOpts, _enodeId, _ip, _port, _raftport, _orgId)
}

// AddNode is a paid mutator transaction binding the contract method 0xc7e91b45.
//
// Solidity: function addNode(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId) returns()
func (_EeaNodeManager *EeaNodeManagerTransactorSession) AddNode(_enodeId string, _ip [32]byte, _port uint16, _raftport uint16, _orgId string) (*types.Transaction, error) {
	return _EeaNodeManager.Contract.AddNode(&_EeaNodeManager.TransactOpts, _enodeId, _ip, _port, _raftport, _orgId)
}

// AddOrgNode is a paid mutator transaction binding the contract method 0x665dcec3.
//
// Solidity: function addOrgNode(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId) returns()
func (_EeaNodeManager *EeaNodeManagerTransactor) AddOrgNode(opts *bind.TransactOpts, _enodeId string, _ip [32]byte, _port uint16, _raftport uint16, _orgId string) (*types.Transaction, error) {
	return _EeaNodeManager.contract.Transact(opts, "addOrgNode", _enodeId, _ip, _port, _raftport, _orgId)
}

// AddOrgNode is a paid mutator transaction binding the contract method 0x665dcec3.
//
// Solidity: function addOrgNode(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId) returns()
func (_EeaNodeManager *EeaNodeManagerSession) AddOrgNode(_enodeId string, _ip [32]byte, _port uint16, _raftport uint16, _orgId string) (*types.Transaction, error) {
	return _EeaNodeManager.Contract.AddOrgNode(&_EeaNodeManager.TransactOpts, _enodeId, _ip, _port, _raftport, _orgId)
}

// AddOrgNode is a paid mutator transaction binding the contract method 0x665dcec3.
//
// Solidity: function addOrgNode(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId) returns()
func (_EeaNodeManager *EeaNodeManagerTransactorSession) AddOrgNode(_enodeId string, _ip [32]byte, _port uint16, _raftport uint16, _orgId string) (*types.Transaction, error) {
	return _EeaNodeManager.Contract.AddOrgNode(&_EeaNodeManager.TransactOpts, _enodeId, _ip, _port, _raftport, _orgId)
}

// ApproveNode is a paid mutator transaction binding the contract method 0x98b46f99.
//
// Solidity: function approveNode(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId) returns()
func (_EeaNodeManager *EeaNodeManagerTransactor) ApproveNode(opts *bind.TransactOpts, _enodeId string, _ip [32]byte, _port uint16, _raftport uint16, _orgId string) (*types.Transaction, error) {
	return _EeaNodeManager.contract.Transact(opts, "approveNode", _enodeId, _ip, _port, _raftport, _orgId)
}

// ApproveNode is a paid mutator transaction binding the contract method 0x98b46f99.
//
// Solidity: function approveNode(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId) returns()
func (_EeaNodeManager *EeaNodeManagerSession) ApproveNode(_enodeId string, _ip [32]byte, _port uint16, _raftport uint16, _orgId string) (*types.Transaction, error) {
	return _EeaNodeManager.Contract.ApproveNode(&_EeaNodeManager.TransactOpts, _enodeId, _ip, _port, _raftport, _orgId)
}

// ApproveNode is a paid mutator transaction binding the contract method 0x98b46f99.
//
// Solidity: function approveNode(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId) returns()
func (_EeaNodeManager *EeaNodeManagerTransactorSession) ApproveNode(_enodeId string, _ip [32]byte, _port uint16, _raftport uint16, _orgId string) (*types.Transaction, error) {
	return _EeaNodeManager.Contract.ApproveNode(&_EeaNodeManager.TransactOpts, _enodeId, _ip, _port, _raftport, _orgId)
}

// UpdateNodeStatus is a paid mutator transaction binding the contract method 0xc49925e5.
//
// Solidity: function updateNodeStatus(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId, uint256 _action) returns()
func (_EeaNodeManager *EeaNodeManagerTransactor) UpdateNodeStatus(opts *bind.TransactOpts, _enodeId string, _ip [32]byte, _port uint16, _raftport uint16, _orgId string, _action *big.Int) (*types.Transaction, error) {
	return _EeaNodeManager.contract.Transact(opts, "updateNodeStatus", _enodeId, _ip, _port, _raftport, _orgId, _action)
}

// UpdateNodeStatus is a paid mutator transaction binding the contract method 0xc49925e5.
//
// Solidity: function updateNodeStatus(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId, uint256 _action) returns()
func (_EeaNodeManager *EeaNodeManagerSession) UpdateNodeStatus(_enodeId string, _ip [32]byte, _port uint16, _raftport uint16, _orgId string, _action *big.Int) (*types.Transaction, error) {
	return _EeaNodeManager.Contract.UpdateNodeStatus(&_EeaNodeManager.TransactOpts, _enodeId, _ip, _port, _raftport, _orgId, _action)
}

// UpdateNodeStatus is a paid mutator transaction binding the contract method 0xc49925e5.
//
// Solidity: function updateNodeStatus(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId, uint256 _action) returns()
func (_EeaNodeManager *EeaNodeManagerTransactorSession) UpdateNodeStatus(_enodeId string, _ip [32]byte, _port uint16, _raftport uint16, _orgId string, _action *big.Int) (*types.Transaction, error) {
	return _EeaNodeManager.Contract.UpdateNodeStatus(&_EeaNodeManager.TransactOpts, _enodeId, _ip, _port, _raftport, _orgId, _action)
}

// EeaNodeManagerNodeActivatedIterator is returned from FilterNodeActivated and is used to iterate over the raw logs and unpacked data for NodeActivated events raised by the EeaNodeManager contract.
type EeaNodeManagerNodeActivatedIterator struct {
	Event *EeaNodeManagerNodeActivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EeaNodeManagerNodeActivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EeaNodeManagerNodeActivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EeaNodeManagerNodeActivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EeaNodeManagerNodeActivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EeaNodeManagerNodeActivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EeaNodeManagerNodeActivated represents a NodeActivated event raised by the EeaNodeManager contract.
type EeaNodeManagerNodeActivated struct {
	EnodeId  string
	Ip       [32]byte
	Port     uint16
	Raftport uint16
	OrgId    string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterNodeActivated is a free log retrieval operation binding the contract event 0x15a39d228ada6f8cd251dff4699c7fa72f597a677bdc7472c3f0decb6384bcba.
//
// Solidity: event NodeActivated(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId)
func (_EeaNodeManager *EeaNodeManagerFilterer) FilterNodeActivated(opts *bind.FilterOpts) (*EeaNodeManagerNodeActivatedIterator, error) {

	logs, sub, err := _EeaNodeManager.contract.FilterLogs(opts, "NodeActivated")
	if err != nil {
		return nil, err
	}
	return &EeaNodeManagerNodeActivatedIterator{contract: _EeaNodeManager.contract, event: "NodeActivated", logs: logs, sub: sub}, nil
}

// WatchNodeActivated is a free log subscription operation binding the contract event 0x15a39d228ada6f8cd251dff4699c7fa72f597a677bdc7472c3f0decb6384bcba.
//
// Solidity: event NodeActivated(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId)
func (_EeaNodeManager *EeaNodeManagerFilterer) WatchNodeActivated(opts *bind.WatchOpts, sink chan<- *EeaNodeManagerNodeActivated) (event.Subscription, error) {

	logs, sub, err := _EeaNodeManager.contract.WatchLogs(opts, "NodeActivated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EeaNodeManagerNodeActivated)
				if err := _EeaNodeManager.contract.UnpackLog(event, "NodeActivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeActivated is a log parse operation binding the contract event 0x15a39d228ada6f8cd251dff4699c7fa72f597a677bdc7472c3f0decb6384bcba.
//
// Solidity: event NodeActivated(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId)
func (_EeaNodeManager *EeaNodeManagerFilterer) ParseNodeActivated(log types.Log) (*EeaNodeManagerNodeActivated, error) {
	event := new(EeaNodeManagerNodeActivated)
	if err := _EeaNodeManager.contract.UnpackLog(event, "NodeActivated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EeaNodeManagerNodeApprovedIterator is returned from FilterNodeApproved and is used to iterate over the raw logs and unpacked data for NodeApproved events raised by the EeaNodeManager contract.
type EeaNodeManagerNodeApprovedIterator struct {
	Event *EeaNodeManagerNodeApproved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EeaNodeManagerNodeApprovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EeaNodeManagerNodeApproved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EeaNodeManagerNodeApproved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EeaNodeManagerNodeApprovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EeaNodeManagerNodeApprovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EeaNodeManagerNodeApproved represents a NodeApproved event raised by the EeaNodeManager contract.
type EeaNodeManagerNodeApproved struct {
	EnodeId  string
	Ip       [32]byte
	Port     uint16
	Raftport uint16
	OrgId    string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterNodeApproved is a free log retrieval operation binding the contract event 0x6f0cecdbbbb8e6084b663e87ec5ac602e24f19142f849f540ba883707ff10dbd.
//
// Solidity: event NodeApproved(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId)
func (_EeaNodeManager *EeaNodeManagerFilterer) FilterNodeApproved(opts *bind.FilterOpts) (*EeaNodeManagerNodeApprovedIterator, error) {

	logs, sub, err := _EeaNodeManager.contract.FilterLogs(opts, "NodeApproved")
	if err != nil {
		return nil, err
	}
	return &EeaNodeManagerNodeApprovedIterator{contract: _EeaNodeManager.contract, event: "NodeApproved", logs: logs, sub: sub}, nil
}

// WatchNodeApproved is a free log subscription operation binding the contract event 0x6f0cecdbbbb8e6084b663e87ec5ac602e24f19142f849f540ba883707ff10dbd.
//
// Solidity: event NodeApproved(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId)
func (_EeaNodeManager *EeaNodeManagerFilterer) WatchNodeApproved(opts *bind.WatchOpts, sink chan<- *EeaNodeManagerNodeApproved) (event.Subscription, error) {

	logs, sub, err := _EeaNodeManager.contract.WatchLogs(opts, "NodeApproved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EeaNodeManagerNodeApproved)
				if err := _EeaNodeManager.contract.UnpackLog(event, "NodeApproved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeApproved is a log parse operation binding the contract event 0x6f0cecdbbbb8e6084b663e87ec5ac602e24f19142f849f540ba883707ff10dbd.
//
// Solidity: event NodeApproved(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId)
func (_EeaNodeManager *EeaNodeManagerFilterer) ParseNodeApproved(log types.Log) (*EeaNodeManagerNodeApproved, error) {
	event := new(EeaNodeManagerNodeApproved)
	if err := _EeaNodeManager.contract.UnpackLog(event, "NodeApproved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EeaNodeManagerNodeBlacklistedIterator is returned from FilterNodeBlacklisted and is used to iterate over the raw logs and unpacked data for NodeBlacklisted events raised by the EeaNodeManager contract.
type EeaNodeManagerNodeBlacklistedIterator struct {
	Event *EeaNodeManagerNodeBlacklisted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EeaNodeManagerNodeBlacklistedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EeaNodeManagerNodeBlacklisted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EeaNodeManagerNodeBlacklisted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EeaNodeManagerNodeBlacklistedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EeaNodeManagerNodeBlacklistedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EeaNodeManagerNodeBlacklisted represents a NodeBlacklisted event raised by the EeaNodeManager contract.
type EeaNodeManagerNodeBlacklisted struct {
	EnodeId  string
	Ip       [32]byte
	Port     uint16
	Raftport uint16
	OrgId    string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterNodeBlacklisted is a free log retrieval operation binding the contract event 0x8c43ac01aede36d30c02bd0382ec04737eb680b0229aba5196f4ca38bad74907.
//
// Solidity: event NodeBlacklisted(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId)
func (_EeaNodeManager *EeaNodeManagerFilterer) FilterNodeBlacklisted(opts *bind.FilterOpts) (*EeaNodeManagerNodeBlacklistedIterator, error) {

	logs, sub, err := _EeaNodeManager.contract.FilterLogs(opts, "NodeBlacklisted")
	if err != nil {
		return nil, err
	}
	return &EeaNodeManagerNodeBlacklistedIterator{contract: _EeaNodeManager.contract, event: "NodeBlacklisted", logs: logs, sub: sub}, nil
}

// WatchNodeBlacklisted is a free log subscription operation binding the contract event 0x8c43ac01aede36d30c02bd0382ec04737eb680b0229aba5196f4ca38bad74907.
//
// Solidity: event NodeBlacklisted(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId)
func (_EeaNodeManager *EeaNodeManagerFilterer) WatchNodeBlacklisted(opts *bind.WatchOpts, sink chan<- *EeaNodeManagerNodeBlacklisted) (event.Subscription, error) {

	logs, sub, err := _EeaNodeManager.contract.WatchLogs(opts, "NodeBlacklisted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EeaNodeManagerNodeBlacklisted)
				if err := _EeaNodeManager.contract.UnpackLog(event, "NodeBlacklisted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeBlacklisted is a log parse operation binding the contract event 0x8c43ac01aede36d30c02bd0382ec04737eb680b0229aba5196f4ca38bad74907.
//
// Solidity: event NodeBlacklisted(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId)
func (_EeaNodeManager *EeaNodeManagerFilterer) ParseNodeBlacklisted(log types.Log) (*EeaNodeManagerNodeBlacklisted, error) {
	event := new(EeaNodeManagerNodeBlacklisted)
	if err := _EeaNodeManager.contract.UnpackLog(event, "NodeBlacklisted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EeaNodeManagerNodeDeactivatedIterator is returned from FilterNodeDeactivated and is used to iterate over the raw logs and unpacked data for NodeDeactivated events raised by the EeaNodeManager contract.
type EeaNodeManagerNodeDeactivatedIterator struct {
	Event *EeaNodeManagerNodeDeactivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EeaNodeManagerNodeDeactivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EeaNodeManagerNodeDeactivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EeaNodeManagerNodeDeactivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EeaNodeManagerNodeDeactivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EeaNodeManagerNodeDeactivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EeaNodeManagerNodeDeactivated represents a NodeDeactivated event raised by the EeaNodeManager contract.
type EeaNodeManagerNodeDeactivated struct {
	EnodeId  string
	Ip       [32]byte
	Port     uint16
	Raftport uint16
	OrgId    string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterNodeDeactivated is a free log retrieval operation binding the contract event 0xa5aeb6d00c2f320e736d068e804332b8c08f05e6b153cbe6316bcf37f858890f.
//
// Solidity: event NodeDeactivated(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId)
func (_EeaNodeManager *EeaNodeManagerFilterer) FilterNodeDeactivated(opts *bind.FilterOpts) (*EeaNodeManagerNodeDeactivatedIterator, error) {

	logs, sub, err := _EeaNodeManager.contract.FilterLogs(opts, "NodeDeactivated")
	if err != nil {
		return nil, err
	}
	return &EeaNodeManagerNodeDeactivatedIterator{contract: _EeaNodeManager.contract, event: "NodeDeactivated", logs: logs, sub: sub}, nil
}

// WatchNodeDeactivated is a free log subscription operation binding the contract event 0xa5aeb6d00c2f320e736d068e804332b8c08f05e6b153cbe6316bcf37f858890f.
//
// Solidity: event NodeDeactivated(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId)
func (_EeaNodeManager *EeaNodeManagerFilterer) WatchNodeDeactivated(opts *bind.WatchOpts, sink chan<- *EeaNodeManagerNodeDeactivated) (event.Subscription, error) {

	logs, sub, err := _EeaNodeManager.contract.WatchLogs(opts, "NodeDeactivated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EeaNodeManagerNodeDeactivated)
				if err := _EeaNodeManager.contract.UnpackLog(event, "NodeDeactivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeDeactivated is a log parse operation binding the contract event 0xa5aeb6d00c2f320e736d068e804332b8c08f05e6b153cbe6316bcf37f858890f.
//
// Solidity: event NodeDeactivated(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId)
func (_EeaNodeManager *EeaNodeManagerFilterer) ParseNodeDeactivated(log types.Log) (*EeaNodeManagerNodeDeactivated, error) {
	event := new(EeaNodeManagerNodeDeactivated)
	if err := _EeaNodeManager.contract.UnpackLog(event, "NodeDeactivated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EeaNodeManagerNodeProposedIterator is returned from FilterNodeProposed and is used to iterate over the raw logs and unpacked data for NodeProposed events raised by the EeaNodeManager contract.
type EeaNodeManagerNodeProposedIterator struct {
	Event *EeaNodeManagerNodeProposed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EeaNodeManagerNodeProposedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EeaNodeManagerNodeProposed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EeaNodeManagerNodeProposed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EeaNodeManagerNodeProposedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EeaNodeManagerNodeProposedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EeaNodeManagerNodeProposed represents a NodeProposed event raised by the EeaNodeManager contract.
type EeaNodeManagerNodeProposed struct {
	EnodeId  string
	Ip       [32]byte
	Port     uint16
	Raftport uint16
	OrgId    string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterNodeProposed is a free log retrieval operation binding the contract event 0xa3414c05ead5b1157964990198a6e86d39c3b029c0f652b3b5870333e79a270a.
//
// Solidity: event NodeProposed(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId)
func (_EeaNodeManager *EeaNodeManagerFilterer) FilterNodeProposed(opts *bind.FilterOpts) (*EeaNodeManagerNodeProposedIterator, error) {

	logs, sub, err := _EeaNodeManager.contract.FilterLogs(opts, "NodeProposed")
	if err != nil {
		return nil, err
	}
	return &EeaNodeManagerNodeProposedIterator{contract: _EeaNodeManager.contract, event: "NodeProposed", logs: logs, sub: sub}, nil
}

// WatchNodeProposed is a free log subscription operation binding the contract event 0xa3414c05ead5b1157964990198a6e86d39c3b029c0f652b3b5870333e79a270a.
//
// Solidity: event NodeProposed(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId)
func (_EeaNodeManager *EeaNodeManagerFilterer) WatchNodeProposed(opts *bind.WatchOpts, sink chan<- *EeaNodeManagerNodeProposed) (event.Subscription, error) {

	logs, sub, err := _EeaNodeManager.contract.WatchLogs(opts, "NodeProposed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EeaNodeManagerNodeProposed)
				if err := _EeaNodeManager.contract.UnpackLog(event, "NodeProposed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeProposed is a log parse operation binding the contract event 0xa3414c05ead5b1157964990198a6e86d39c3b029c0f652b3b5870333e79a270a.
//
// Solidity: event NodeProposed(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId)
func (_EeaNodeManager *EeaNodeManagerFilterer) ParseNodeProposed(log types.Log) (*EeaNodeManagerNodeProposed, error) {
	event := new(EeaNodeManagerNodeProposed)
	if err := _EeaNodeManager.contract.UnpackLog(event, "NodeProposed", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EeaNodeManagerNodeRecoveryCompletedIterator is returned from FilterNodeRecoveryCompleted and is used to iterate over the raw logs and unpacked data for NodeRecoveryCompleted events raised by the EeaNodeManager contract.
type EeaNodeManagerNodeRecoveryCompletedIterator struct {
	Event *EeaNodeManagerNodeRecoveryCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EeaNodeManagerNodeRecoveryCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EeaNodeManagerNodeRecoveryCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EeaNodeManagerNodeRecoveryCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EeaNodeManagerNodeRecoveryCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EeaNodeManagerNodeRecoveryCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EeaNodeManagerNodeRecoveryCompleted represents a NodeRecoveryCompleted event raised by the EeaNodeManager contract.
type EeaNodeManagerNodeRecoveryCompleted struct {
	EnodeId  string
	Ip       [32]byte
	Port     uint16
	Raftport uint16
	OrgId    string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterNodeRecoveryCompleted is a free log retrieval operation binding the contract event 0x99402648fbc19e6ffa28f940e2fefbb522038bea8329368ecfcf672d299fba1d.
//
// Solidity: event NodeRecoveryCompleted(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId)
func (_EeaNodeManager *EeaNodeManagerFilterer) FilterNodeRecoveryCompleted(opts *bind.FilterOpts) (*EeaNodeManagerNodeRecoveryCompletedIterator, error) {

	logs, sub, err := _EeaNodeManager.contract.FilterLogs(opts, "NodeRecoveryCompleted")
	if err != nil {
		return nil, err
	}
	return &EeaNodeManagerNodeRecoveryCompletedIterator{contract: _EeaNodeManager.contract, event: "NodeRecoveryCompleted", logs: logs, sub: sub}, nil
}

// WatchNodeRecoveryCompleted is a free log subscription operation binding the contract event 0x99402648fbc19e6ffa28f940e2fefbb522038bea8329368ecfcf672d299fba1d.
//
// Solidity: event NodeRecoveryCompleted(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId)
func (_EeaNodeManager *EeaNodeManagerFilterer) WatchNodeRecoveryCompleted(opts *bind.WatchOpts, sink chan<- *EeaNodeManagerNodeRecoveryCompleted) (event.Subscription, error) {

	logs, sub, err := _EeaNodeManager.contract.WatchLogs(opts, "NodeRecoveryCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EeaNodeManagerNodeRecoveryCompleted)
				if err := _EeaNodeManager.contract.UnpackLog(event, "NodeRecoveryCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeRecoveryCompleted is a log parse operation binding the contract event 0x99402648fbc19e6ffa28f940e2fefbb522038bea8329368ecfcf672d299fba1d.
//
// Solidity: event NodeRecoveryCompleted(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId)
func (_EeaNodeManager *EeaNodeManagerFilterer) ParseNodeRecoveryCompleted(log types.Log) (*EeaNodeManagerNodeRecoveryCompleted, error) {
	event := new(EeaNodeManagerNodeRecoveryCompleted)
	if err := _EeaNodeManager.contract.UnpackLog(event, "NodeRecoveryCompleted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EeaNodeManagerNodeRecoveryInitiatedIterator is returned from FilterNodeRecoveryInitiated and is used to iterate over the raw logs and unpacked data for NodeRecoveryInitiated events raised by the EeaNodeManager contract.
type EeaNodeManagerNodeRecoveryInitiatedIterator struct {
	Event *EeaNodeManagerNodeRecoveryInitiated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EeaNodeManagerNodeRecoveryInitiatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EeaNodeManagerNodeRecoveryInitiated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EeaNodeManagerNodeRecoveryInitiated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EeaNodeManagerNodeRecoveryInitiatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EeaNodeManagerNodeRecoveryInitiatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EeaNodeManagerNodeRecoveryInitiated represents a NodeRecoveryInitiated event raised by the EeaNodeManager contract.
type EeaNodeManagerNodeRecoveryInitiated struct {
	EnodeId  string
	Ip       [32]byte
	Port     uint16
	Raftport uint16
	OrgId    string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterNodeRecoveryInitiated is a free log retrieval operation binding the contract event 0xd4416e1495ddee28e157625b88f206e0e3cfd5576d4247ae1c4db3ec4e362e55.
//
// Solidity: event NodeRecoveryInitiated(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId)
func (_EeaNodeManager *EeaNodeManagerFilterer) FilterNodeRecoveryInitiated(opts *bind.FilterOpts) (*EeaNodeManagerNodeRecoveryInitiatedIterator, error) {

	logs, sub, err := _EeaNodeManager.contract.FilterLogs(opts, "NodeRecoveryInitiated")
	if err != nil {
		return nil, err
	}
	return &EeaNodeManagerNodeRecoveryInitiatedIterator{contract: _EeaNodeManager.contract, event: "NodeRecoveryInitiated", logs: logs, sub: sub}, nil
}

// WatchNodeRecoveryInitiated is a free log subscription operation binding the contract event 0xd4416e1495ddee28e157625b88f206e0e3cfd5576d4247ae1c4db3ec4e362e55.
//
// Solidity: event NodeRecoveryInitiated(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId)
func (_EeaNodeManager *EeaNodeManagerFilterer) WatchNodeRecoveryInitiated(opts *bind.WatchOpts, sink chan<- *EeaNodeManagerNodeRecoveryInitiated) (event.Subscription, error) {

	logs, sub, err := _EeaNodeManager.contract.WatchLogs(opts, "NodeRecoveryInitiated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EeaNodeManagerNodeRecoveryInitiated)
				if err := _EeaNodeManager.contract.UnpackLog(event, "NodeRecoveryInitiated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeRecoveryInitiated is a log parse operation binding the contract event 0xd4416e1495ddee28e157625b88f206e0e3cfd5576d4247ae1c4db3ec4e362e55.
//
// Solidity: event NodeRecoveryInitiated(string _enodeId, bytes32 _ip, uint16 _port, uint16 _raftport, string _orgId)
func (_EeaNodeManager *EeaNodeManagerFilterer) ParseNodeRecoveryInitiated(log types.Log) (*EeaNodeManagerNodeRecoveryInitiated, error) {
	event := new(EeaNodeManagerNodeRecoveryInitiated)
	if err := _EeaNodeManager.contract.UnpackLog(event, "NodeRecoveryInitiated", log); err != nil {
		return nil, err
	}
	return event, nil
}
